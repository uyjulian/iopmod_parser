{
	"AddDrv" : "int AddDrv(iop_device_t *device);",
	"AllocHardTimer" : "int AllocHardTimer(int source, int size, int prescale);",
	"AllocHeapMemory" : "void *AllocHeapMemory(void *heap, size_t nbytes);",
	"AllocLoadMemory" : "void *AllocLoadMemory(int type, unsigned long size, void *addr);",
	"AllocSysMemory" : "void * AllocSysMemory(int mode, int size, void *ptr);",
	"AllocateFpl" : "void *AllocateFpl(int fplId);",
	"AllocateVpl" : "void *AllocateVpl(int vplId, int size);",
	"CancelAlarm" : "int CancelAlarm(unsigned int (*alarm_cb)(void *), void *arg);",
	"CancelWakeupThread" : "int CancelWakeupThread(int thid);",
	"ChangeThreadPriority" : "int ChangeThreadPriority(int thid, int priority);",
	"CheckThreadStack" : "int CheckThreadStack(void);",
	"ClearEventFlag" : "int ClearEventFlag(int ef, u32 bits);",
	"CpuDisableIntr" : "int CpuDisableIntr();",
	"CpuEnableIntr" : "int CpuEnableIntr();",
	"CpuInvokeInKmode" : "int CpuInvokeInKmode(void *function, ...);",
	"CpuResumeIntr" : "int CpuResumeIntr(int state);",
	"CpuSuspendIntr" : "int CpuSuspendIntr(int *state);",
	"CreateEventFlag" : "int CreateEventFlag(iop_event_t *event);",
	"CreateFpl" : "int CreateFpl(iop_fpl_param *param);",
	"CreateHeap" : "void *CreateHeap(int heapblocksize, int flag);",
	"CreateMbx" : "int CreateMbx(iop_mbx_t *mbx);",
	"CreateSema" : "int CreateSema(iop_sema_t *sema);",
	"CreateThread" : "int CreateThread(iop_thread_t *thread);",
	"CreateVpl" : "int CreateVpl(iop_vpl_param *param);",
	"DelDrv" : "int DelDrv(const char *name);",
	"DelayThread" : "int DelayThread(int usec);",
	"DeleteEventFlag" : "int DeleteEventFlag(int ef);",
	"DeleteFpl" : "int DeleteFpl(int fplId);",
	"DeleteHeap" : "void DeleteHeap(void *heap);",
	"DeleteMbx" : "int DeleteMbx(int mbxid);",
	"DeleteSema" : "int DeleteSema(int semid);",
	"DeleteThread" : "int DeleteThread(int thid);",
	"DeleteVpl" : "int DeleteVpl(int vplId);",
	"DisableDispatchIntr" : "void DisableDispatchIntr(int irq);",
	"DisableDispatchThread" : "int DisableDispatchThread(void);",
	"DisableIntr" : "int DisableIntr(int irq, int *res);",
	"DvrdrvDisableIntr" : "int DvrdrvDisableIntr(s16 a1);",
	"DvrdrvEnableIntr" : "int DvrdrvEnableIntr(u16 a1);",
	"DvrdrvExecCmdAck" : "int DvrdrvExecCmdAck(drvdrv_exec_cmd_ack *a1);",
	"DvrdrvExecCmdAckComp" : "int DvrdrvExecCmdAckComp(drvdrv_exec_cmd_ack *a1);",
	"DvrdrvExecCmdAckDma2Comp" : "int DvrdrvExecCmdAckDma2Comp(drvdrv_exec_cmd_ack *a1);",
	"DvrdrvExecCmdAckDmaRecvComp" : "int DvrdrvExecCmdAckDmaRecvComp(drvdrv_exec_cmd_ack *a1);",
	"DvrdrvExecCmdAckDmaSendComp" : "int DvrdrvExecCmdAckDmaSendComp(drvdrv_exec_cmd_ack *a1);",
	"DvrdrvRegisterIntrHandler" : "int DvrdrvRegisterIntrHandler(int a1, void *arg, void (*a3)(int, void *));",
	"DvrdrvResetSystem" : "int DvrdrvResetSystem();",
	"DvrdrvUnregisterIntrHandler" : "int DvrdrvUnregisterIntrHandler(void (*a1)(int, void *));",
	"EnableDispatchIntr" : "void EnableDispatchIntr(int irq);",
	"EnableDispatchThread" : "int EnableDispatchThread(void);",
	"EnableIntr" : "int EnableIntr(int irq);",
	"ExitDeleteThread" : "int ExitDeleteThread();",
	"ExitThread" : "int ExitThread();",
	"FindImageInfo" : "ModuleInfo_t *FindImageInfo(void* addr);",
	"FlushDcache" : "void FlushDcache(void);",
	"FlushIcache" : "void FlushIcache(void);",
	"FreeFpl" : "int FreeFpl(int fplId, void *memory);",
	"FreeHardTimer" : "int FreeHardTimer(int timid);",
	"FreeHeapMemory" : "int FreeHeapMemory(void *heap, void *ptr);",
	"FreeLoadMemory" : "int FreeLoadMemory(void *area);",
	"FreeSysMemory" : "int FreeSysMemory(void *ptr);",
	"FreeVpl" : "int FreeVpl(int vplId, void *memory);",
	"GetBaseAddress" : "int GetBaseAddress(int device);",
	"GetCommonDelay" : "int GetCommonDelay(void);",
	"GetDelay" : "int GetDelay(int device);",
	"GetDeviceList" : "iop_device_t **GetDeviceList(void);",
	"GetExHandlersTable" : "void* GetExHandlersTable();",
	"GetFloatTime" : "int GetFloatTime(void);",
	"GetHardTimerIntrCode" : "int GetHardTimerIntrCode(int timid);",
	"GetHoldMode" : "u32 GetHoldMode(int holdnum);",
	"GetHoldReg" : "u32 GetHoldReg(int holdnum);",
	"GetHoldTime" : "int GetHoldTime(void);",
	"GetLoadcoreInternalData" : "lc_internals_t *GetLoadcoreInternalData(void);",
	"GetModloadInternalData" : "void *GetModloadInternalData(void **pInternalData);",
	"GetModuleIdList" : "int GetModuleIdList(int *readbuf, int readbufsize, int *modulecount);",
	"GetModuleIdListByName" : "int GetModuleIdListByName(const char *name, int *readbuf, int readbufsize, int *modulecount);",
	"GetRecoveryTime" : "int GetRecoveryTime(void);",
	"GetStrobeTime" : "int GetStrobeTime(void);",
	"GetSystemStatusFlag" : "int GetSystemStatusFlag();",
	"GetSystemTime" : "int GetSystemTime(iop_sys_clock_t *sys_clock);",
	"GetSystemTimeLow" : "unsigned int GetSystemTimeLow(void);",
	"GetThreadCurrentPriority" : "int GetThreadCurrentPriority(void);",
	"GetThreadId" : "int GetThreadId(void);",
	"GetThreadStackFreeSize" : "int GetThreadStackFreeSize(int thid);",
	"GetThreadmanIdList" : "int GetThreadmanIdList(int type, int *readbuf, int readbufsize, int *objectcount);",
	"GetTimerCompare" : "u32 GetTimerCompare(int timid);",
	"GetTimerCounter" : "u32 GetTimerCounter(int timid);",
	"GetTimerStatus" : "u32 GetTimerStatus(int timid);",
	"GetTimersTable" : "void* GetTimersTable();",
	"HeapChunkSize" : "int HeapChunkSize(void* chunk);",
	"HeapPrepare" : "void HeapPrepare(void* mem, int size);",
	"HeapTotalFreeSize" : "int HeapTotalFreeSize(void *heap);",
	"Kprintf" : "int Kprintf(const char *format,...);",
	"KprintfSet" : "void KprintfSet(KprintfHandler_t *, void *context);",
	"LinkImports" : "int LinkImports(void* addr, int size);",
	"LinkModule" : "void LinkModule(ModuleInfo_t *mi);",
	"LoadModule" : "int LoadModule(const char *name);",
	"LoadModuleAddress" : "int LoadModuleAddress(const char *name, int, int);",
	"LoadModuleBuffer" : "int LoadModuleBuffer(void *buffer);",
	"LoadModuleBufferAddress" : "int LoadModuleBufferAddress(void *buffer, int, int);",
	"LoadModuleImage" : "int LoadModuleImage(void* image, FileInfo_t *fi);",
	"LoadModuleWithOption" : "int LoadModuleWithOption(const char *filename, const LMWOoption *option);",
	"LoadStartModule" : "int LoadStartModule(const char *name, int arglen, const char *args, int *result);",
	"Mc1stCacheEntSetWrFlagOff" : "void Mc1stCacheEntSetWrFlagOff(void);",
	"McChDir" : "int  McChDir(int port, int slot, char *newdir, char *currentdir);",
	"McCheckBlock" : "int  McCheckBlock(int port, int slot, int block);",
	"McClose" : "int  McClose(int fd);",
	"McCloseAll" : "int  McCloseAll(void);",
	"McCreateDirentry" : "int McCreateDirentry(int port, int slot, int parent_cluster, int num_entries, int cluster, sceMcStDateTime *ctime);",
	"McDataChecksum" : "void McDataChecksum(void *buf, void *ecc);",
	"McDelete" : "int  McDelete(int port, int slot, char *filename, int flags);",
	"McDetectCard" : "int  McDetectCard(int port, int slot);",
	"McDetectCard2" : "int  McDetectCard2(int port, int slot);",
	"McEraseBlock" : "int  McEraseBlock(int port, int block, void **pagebuf, void *eccbuf);",
	"McEraseBlock2" : "int  McEraseBlock2(int port, int slot, int block, void **pagebuf, void *eccbuf);",
	"McFlush" : "int  McFlush(int fd);",
	"McFlushCache" : "int McFlushCache(int port, int slot);",
	"McFormat" : "int  McFormat(int port, int slot);",
	"McGetCardSpec" : "int  McGetCardSpec(int port, int slot, s16 *pagesize, u16 *blocksize, int *cardsize, u8 *flags);",
	"McGetDir" : "int  McGetDir(int port, int slot, char *dirname, int flags, int maxent, sceMcTblGetDir *info);",
	"McGetEntSpace" : "int  McGetEntSpace(int port, int slot, char *dirname);",
	"McGetFATentry" : "int  McGetFATentry(int port, int slot, int fat_index, int *fat_entry);",
	"McGetFormat" : "int  McGetFormat(int port, int slot);",
	"McGetFreeClusters" : "int  McGetFreeClusters(int port, int slot);",
	"McGetMcType" : "int  McGetMcType(int port, int slot);",
	"McGetModuleInfo" : "struct irx_id *McGetModuleInfo(void);",
	"McOpen" : "int  McOpen(int port, int slot, char *filename, int flags);",
	"McRead" : "int  McRead(int fd, void *buf, int length);",
	"McReadCluster" : "int McReadCluster(int port, int slot, int cluster, McCacheEntry **pmce);",
	"McReadDirEntry" : "int  McReadDirEntry(int port, int slot, int cluster, int fsindex, McFsEntry **pfse);",
	"McReadPS1PDACard" : "int  McReadPS1PDACard(int port, int slot, int page, void *buf);",
	"McReadPage" : "int  McReadPage(int port, int slot, int page, void *buf);",
	"McReplaceBadBlock" : "int  McReplaceBadBlock(void);",
	"McRetOnly" : "int  McRetOnly(int fd);",
	"McSeek" : "int  McSeek(int fd, int offset, int origin);",
	"McSetDirEntryState" : "int McSetDirEntryState(int port, int slot, int cluster, int fsindex, int flags);",
	"McSetFATentry" : "int  McSetFATentry(int port, int slot, int fat_index, int fat_entry);",
	"McSetFileInfo" : "int  McSetFileInfo(int port, int slot, char *filename, sceMcTblGetDir *info, int flags);",
	"McSetPS1CardFlag" : "void McSetPS1CardFlag(int flag);",
	"McUnformat" : "int  McUnformat(int port, int slot);",
	"McWrite" : "int  McWrite(int fd, void *buf, int length);",
	"McWritePS1PDACard" : "int  McWritePS1PDACard(int port, int slot, int page, void *buf);",
	"McWritePage" : "int  McWritePage(int port, int slot, int page, void *pagebuf, void *eccbuf);",
	"PollEventFlag" : "int PollEventFlag(int ef, u32 bits, int mode, u32 *resbits);",
	"PollMbx" : "int PollMbx(void **msgvar, int mbxid);",
	"PollSema" : "int PollSema(int semid);",
	"QueryBlockSize" : "int QueryBlockSize(void *address);",
	"QueryBlockTopAddress" : "void * QueryBlockTopAddress(void *address);",
	"QueryBootMode" : "int * QueryBootMode(int mode);",
	"QueryIntrContext" : "int QueryIntrContext(void);",
	"QueryIntrStack" : "int QueryIntrStack(void *sp);",
	"QueryLibraryEntryTable" : "void *QueryLibraryEntryTable(iop_library_t *library);",
	"QueryMaxFreeMemSize" : "u32 QueryMaxFreeMemSize();",
	"QueryMemSize" : "u32 QueryMemSize();",
	"QueryTotalFreeMemSize" : "u32 QueryTotalFreeMemSize();",
	"ReBootStart" : "int ReBootStart(const char *command, unsigned int flags);",
	"ReadModuleHeader" : "int ReadModuleHeader(void* image, FileInfo_t *result);",
	"ReceiveMbx" : "int ReceiveMbx(void **msgvar, int mbxid);",
	"ReferEventFlagStatus" : "int ReferEventFlagStatus(int ef, iop_event_info_t* info);",
	"ReferFplStatus" : "int ReferFplStatus(int fplId, iop_fpl_info_t *info);",
	"ReferHardTimer" : "int ReferHardTimer(int source, int size, int mode, int modemask);",
	"ReferMbxStatus" : "int ReferMbxStatus(int mbxid, iop_mbx_status_t *info);",
	"ReferModuleStatus" : "int ReferModuleStatus(int, ModuleStatus *status);",
	"ReferSemaStatus" : "int ReferSemaStatus(int semid, iop_sema_info_t *info);",
	"ReferSystemStatus" : "int ReferSystemStatus(iop_sys_status_t *info, size_t size);",
	"ReferThreadRunStatus" : "int ReferThreadRunStatus(int thid, iop_thread_run_status_t *stat, size_t size);",
	"ReferThreadStatus" : "int ReferThreadStatus(int thid, iop_thread_info_t *info);",
	"ReferVplStatus" : "int ReferVplStatus(int vplId, iop_vpl_info_t *info);",
	"RegisterBootMode" : "void RegisterBootMode(iop_bootmode_t *b);",
	"RegisterDefaultExceptionHandler" : "int RegisterDefaultExceptionHandler(exception_handler_t);",
	"RegisterExceptionHandler" : "int RegisterExceptionHandler(int exception, exception_handler_t);",
	"RegisterIntrHandler" : "int RegisterIntrHandler(int irq, int mode, int (*handler)(void *), void *arg);",
	"RegisterLibraryEntries" : "int RegisterLibraryEntries(struct irx_export_table *exports);",
	"RegisterNonAutoLinkEntries" : "int RegisterNonAutoLinkEntries(struct irx_export_table *exports);",
	"RegisterPostBootCallback" : "int RegisterPostBootCallback(BootupCallback_t func, int priority, int *stat);",
	"RegisterPostBootCallback" : "int RegisterPostBootCallback(BootupCallback_t func, int priority, int *stat);",
	"RegisterPriorityExceptionHandler" : "int RegisterPriorityExceptionHandler(int exception, int priority, exception_handler_t);",
	"RegisterVblankHandler" : "int RegisterVblankHandler(int startend, int priority, int (*handler)(void *), void *arg);",
	"ReleaseDefaultExceptionHandler" : "int ReleaseDefaultExceptionHandler(exception_handler_t);",
	"ReleaseExceptionHandler" : "int ReleaseExceptionHandler(int exception, exception_handler_t);",
	"ReleaseIntrHandler" : "int ReleaseIntrHandler(int irq);",
	"ReleaseLibraryEntries" : "int ReleaseLibraryEntries(struct irx_export_table *exports);",
	"ReleaseVblankHandler" : "int ReleaseVblankHandler(int startend, int (*handler)(void *));",
	"ReleaseWaitThread" : "int ReleaseWaitThread(int thid);",
	"ResumeThread" : "int ResumeThread(int thid);",
	"RotateThreadReadyQueue" : "int RotateThreadReadyQueue(int priority);",
	"SearchModuleByAddress" : "int SearchModuleByAddress(const void *addr);",
	"SearchModuleByName" : "int SearchModuleByName(const char *name);",
	"SecrAuthCard" : "int SecrAuthCard(int port, int slot, int cnum);",
	"SecrCardBootBlock" : "int SecrCardBootBlock(void *src, void *dst, unsigned int size);",
	"SecrCardBootFile" : "void *SecrCardBootFile(int port, int slot, void *buffer);",
	"SecrCardBootHeader" : "int SecrCardBootHeader(int port, int slot, void *buffer, SecrBitTable_t *BitTable, s32 *pSize);",
	"SecrDiskBootBlock" : "int SecrDiskBootBlock(void *src, void *dst, unsigned int size);",
	"SecrDiskBootFile" : "void *SecrDiskBootFile(void *buffer);",
	"SecrDiskBootHeader" : "int SecrDiskBootHeader(void *buffer, SecrBitTable_t *BitTable, s32 *pSize);",
	"SecrDownloadBlock" : "int SecrDownloadBlock(void *src, unsigned int size);",
	"SecrDownloadFile" : "void *SecrDownloadFile(int port, int slot, void *buffer);",
	"SecrDownloadGetICVPS2" : "int SecrDownloadGetICVPS2(void *icvps2);",
	"SecrDownloadGetKbit" : "int SecrDownloadGetKbit(int port, int slot, void *kbit);",
	"SecrDownloadGetKc" : "int SecrDownloadGetKc(int port, int slot, void *kbit);",
	"SecrDownloadHeader" : "int SecrDownloadHeader(int port, int slot, void *buffer, SecrBitTable_t *BitTable, s32 *pSize);",
	"SecrResetAuthCard" : "void SecrResetAuthCard(int port, int slot, int cnum);",
	"SecrSetMcCommandHandler" : "void SecrSetMcCommandHandler(McCommandHandler_t handler);",
	"SecrSetMcDevIDHandler" : "void SecrSetMcDevIDHandler(McDevIDHandler_t handler);",
	"SelfStopModule" : "int SelfStopModule(int arglen, const char *args, int *result);",
	"SelfUnloadModule" : "void SelfUnloadModule(void);",
	"SendMbx" : "int SendMbx(int mbxid, void *msg);",
	"SetAlarm" : "int SetAlarm(iop_sys_clock_t *sys_clock, unsigned int (*alarm_cb)(void *), void *arg);",
	"SetBaseAddress" : "int SetBaseAddress(int device, unsigned int value);",
	"SetCacheCtrl" : "void SetCacheCtrl(u32 val);",
	"SetCheckKelfPathCallback" : "void SetCheckKelfPathCallback(void *CheckKelfPath_fnc);",
	"SetCommonDelay" : "int SetCommonDelay(unsigned int value);",
	"SetDelay" : "int SetDelay(int device, unsigned int value);",
	"SetEventFlag" : "int SetEventFlag(int ef, u32 bits);",
	"SetFloatTime" : "int SetFloatTime(unsigned int value);",
	"SetHoldMode" : "void SetHoldMode(int holdnum, int mode);",
	"SetHoldTime" : "int SetHoldTime(unsigned int value);",
	"SetModuleFlags" : "int SetModuleFlags(int, int flag);",
	"SetNonAutoLinkFlag" : "int SetNonAutoLinkFlag(struct irx_export_table *export);",
	"SetOverflowHandler" : "int SetOverflowHandler(int timid, unsigned int (*handler)(void*), void *common);",
	"SetRebootTimeLibraryHandlingMode" : "int SetRebootTimeLibraryHandlingMode(struct irx_export_table *exports, int mode);",
	"SetRecoveryTime" : "int SetRecoveryTime(unsigned int value);",
	"SetSecrmanCallbacks" : "void SetSecrmanCallbacks(void *SecrCardBootFile_fnc, void *SecrDiskBootFile_fnc, void *SetLoadfileCallbacks_fnc);",
	"SetStrobeTime" : "int SetStrobeTime(unsigned int value);",
	"SetTimerCompare" : "void SetTimerCompare(int timid, u32 compare);",
	"SetTimerCounter" : "void SetTimerCounter(int timid, u32 count);",
	"SetTimerHandler" : "int SetTimerHandler(int timid, unsigned long comparevalue, unsigned int (*timeuphandler)(void*), void *common);",
	"SetTimerMode" : "void SetTimerMode(int timid, int mode);",
	"SetupHardTimer" : "int SetupHardTimer(int timid, int source, int mode, int prescale);",
	"SignalSema" : "int SignalSema(int semid);",
	"SleepThread" : "int SleepThread(void);",
	"StartHardTimer" : "int StartHardTimer(int timid);",
	"StartModule" : "int StartModule(int, const char *name, int arglen, const char *args, int *result);",
	"StartThread" : "int StartThread(int thid, void *arg);",
	"StartThreadArgs" : "int StartThreadArgs(int thid, int args, void *argp);",
	"StdioInit" : "void StdioInit(int mode);",
	"StopHardTimer" : "int StopHardTimer(int timid);",
	"StopModule" : "int StopModule(int, int arglen, const char *args, int *result);",
	"SuspendThread" : "int SuspendThread(int thid);",
	"SysClock2USec" : "void SysClock2USec(iop_sys_clock_t *sys_clock, u32 *sec, u32 *usec);",
	"TerminateThread" : "int TerminateThread(int thid);",
	"USec2SysClock" : "void USec2SysClock(u32 usec, iop_sys_clock_t *sys_clock);",
	"UnlinkImports" : "int UnlinkImports(void* addr, int size);",
	"UnlinkModule" : "void UnlinkModule(ModuleInfo_t *mi);",
	"UnloadModule" : "int UnloadModule(int);",
	"UnsetNonAutoLinkFlag" : "int UnsetNonAutoLinkFlag(struct irx_export_table *export);",
	"WaitEventFlag" : "int WaitEventFlag(int ef, u32 bits, int mode, u32 *resbits);",
	"WaitNonVblank" : "void WaitNonVblank();",
	"WaitSema" : "int WaitSema(int semid);",
	"WaitVblank" : "void WaitVblank();",
	"WaitVblankEnd" : "void WaitVblankEnd();",
	"WaitVblankStart" : "void WaitVblankStart();",
	"WakeupThread" : "int WakeupThread(int thid);",
	"_iGetThreadId" : "s32 _iGetThreadId(void);",
	"_tolower" : "char _tolower(char c);",
	"_toupper" : "char _toupper(char c);",
	"_wmemcopy" : "void *_wmemcopy(u32 *dest, const u32 *src, size_t size);",
	"_wmemset" : "void *_wmemset(u32 *dest, u32 c, size_t size);",
	"ata_device_flush_cache" : "int ata_device_flush_cache(int device);",
	"ata_device_idle" : "int ata_device_idle(int device, int period);",
	"ata_device_idle_immediate" : "int ata_device_idle_immediate(int device);",
	"ata_device_sce_identify_drive" : "int ata_device_sce_identify_drive(int device, void *data);",
	"ata_device_sce_sec_erase" : "int ata_device_sce_sec_erase(int device);",
	"ata_device_sce_sec_set_password" : "int ata_device_sce_sec_set_password(int device, void *password);",
	"ata_device_sce_sec_unlock" : "int ata_device_sce_sec_unlock(int device, void *password);",
	"ata_device_sector_io" : "int ata_device_sector_io(int device, void *buf, u32 lba, u32 nsectors, int dir);",
	"ata_device_smart_get_status" : "int ata_device_smart_get_status(int device);",
	"ata_device_smart_save_attr" : "int ata_device_smart_save_attr(int device);",
	"ata_get_devinfo" : "ata_devinfo_t * ata_get_devinfo(int device);",
	"ata_get_error" : "int ata_get_error(void);",
	"ata_io_finish" : "int ata_io_finish(void);",
	"ata_io_start" : "int ata_io_start(void *buf, u32 blkcount, u16 feature, u16 nsector, u16 sector, u16 lcyl, u16 hcyl, u16 select, u16 command);",
	"ata_reset_devices" : "int ata_reset_devices(void);",
	"atob" : "char *atob(char *s, int *i);",
	"bcmp" : "int bcmp(const void *, const void *, size_t);",
	"bcopy" : "void bcopy(const void *, void *, size_t);",
	"bzero" : "void bzero(void *, size_t);",
	"chdir" : "int chdir(const char *name);",
	"dev9ControlPIO3" : "void dev9ControlPIO3(int ctl);",
	"dev9DmaTransfer" : "int dev9DmaTransfer(int ctrl, void *buf, int bcr, int dir);",
	"dev9GetEEPROM" : "int dev9GetEEPROM(u16 *buf);",
	"dev9IntrDisable" : "void dev9IntrDisable(int mask);",
	"dev9IntrEnable" : "void dev9IntrEnable(int mask);",
	"dev9LED2Ctl" : "void dev9LED2Ctl(int ctl);",
	"dev9LEDCtl" : "void dev9LEDCtl(int ctl);",
	"dev9RegisterIntrCb" : "void dev9RegisterIntrCb(int intr, dev9_intr_cb_t cb);",
	"dev9RegisterPostDmaCb" : "void dev9RegisterPostDmaCb(int ctrl, dev9_dma_cb_t cb);",
	"dev9RegisterPreDmaCb" : "void dev9RegisterPreDmaCb(int ctrl, dev9_dma_cb_t cb);",
	"dev9RegisterShutdownCb" : "int dev9RegisterShutdownCb(int idx, dev9_shutdown_cb_t cb);",
	"dev9Shutdown" : "void dev9Shutdown(void);",
	"devctl" : "int devctl(const char *name, int cmd, void *arg, unsigned int arglen, void *buf, unsigned int buflen);",
	"dmac_ch_get_bcr" : "u32 dmac_ch_get_bcr(u32 channel);",
	"dmac_ch_get_chcr" : "u32 dmac_ch_get_chcr(u32 channel);",
	"dmac_ch_get_madr" : "u32 dmac_ch_get_madr(u32 channel);",
	"dmac_ch_get_tadr" : "u32 dmac_ch_get_tadr(u32 channel);",
	"dmac_ch_set_bcr" : "void dmac_ch_set_bcr(u32 channel, u32 val);",
	"dmac_ch_set_chcr" : "void dmac_ch_set_chcr(u32 channel, u32 val);",
	"dmac_ch_set_dpcr" : "void dmac_ch_set_dpcr(u32 channel, u32 val);",
	"dmac_ch_set_madr" : "void dmac_ch_set_madr(u32 channel, u32 val);",
	"dmac_ch_set_tadr" : "void dmac_ch_set_tadr(u32 channel, u32 val);",
	"dmac_disable" : "void dmac_disable(u32 channel);",
	"dmac_enable" : "void dmac_enable(u32 channel);",
	"dmac_get_4_9_a" : "u32 dmac_get_4_9_a(u32 channel);",
	"dmac_get_BF801578" : "u32 dmac_get_BF801578(void);",
	"dmac_get_BF80157C" : "u32 dmac_get_BF80157C(void);",
	"dmac_get_dicr" : "u32 dmac_get_dicr(void);",
	"dmac_get_dicr2" : "u32 dmac_get_dicr2(void);",
	"dmac_get_dpcr" : "u32 dmac_get_dpcr(void);",
	"dmac_get_dpcr2" : "u32 dmac_get_dpcr2(void);",
	"dmac_get_dpcr3" : "u32 dmac_get_dpcr3(void);",
	"dmac_request" : "int dmac_request(u32 channel, void * addr, u32 size, u32 count, int dir);",
	"dmac_set_4_9_a" : "void dmac_set_4_9_a(u32 channel, u32 val);",
	"dmac_set_BF801578" : "void dmac_set_BF801578(u32 val);",
	"dmac_set_BF80157C" : "void dmac_set_BF80157C(u32 val);",
	"dmac_set_dicr" : "void dmac_set_dicr(u32 val);",
	"dmac_set_dicr2" : "void dmac_set_dicr2(u32 val);",
	"dmac_set_dma_chained_spu_sif0" : "int dmac_set_dma_chained_spu_sif0(u32 channel, u32 size, u32 tadr);",
	"dmac_set_dma_sif0" : "int dmac_set_dma_sif0(u32 channel, u32 size, u32 tadr);",
	"dmac_set_dma_sif1" : "int dmac_set_dma_sif1(u32 ch, u32 size);",
	"dmac_set_dpcr" : "void dmac_set_dpcr(u32 val);",
	"dmac_set_dpcr2" : "void dmac_set_dpcr2(u32 val);",
	"dmac_set_dpcr3" : "void dmac_set_dpcr3(u32 val);",
	"dmac_transfer" : "void dmac_transfer(u32 channel);",
	"fdgetc" : "int fdgetc(int fd);",
	"fdgets" : "char *fdgets(char *buf, int fd);",
	"fdprintf" : "int fdprintf(int fd, const char *format, ...);",
	"fdputc" : "int fdputc(int c, int fd);",
	"fdputs" : "int fdputs(const char *s, int fd);",
	"flash_detect" : "int flash_detect(void);",
	"flash_device_reset" : "int flash_device_reset(void);",
	"flash_get_info" : "int flash_get_info(flash_info_t *info);",
	"flash_page_erase" : "int flash_page_erase(flash_info_t *info, u32 page);",
	"flash_page_read" : "int flash_page_read(flash_info_t *info, u32 page, u32 count, void *buf);",
	"flash_page_write" : "int flash_page_write(flash_info_t *info, u32 page, void *buf);",
	"get_ctype_table" : "void *get_ctype_table();",
	"getchar" : "int getchar(void);",
	"gets" : "char *gets(char *s);",
	"iCancelAlarm" : "int iCancelAlarm(unsigned int (*alarm_cb)(void *), void *arg);",
	"iCancelWakeupThread" : "int iCancelWakeupThread(int thid);",
	"iCatchMultiIntr" : "int iCatchMultiIntr(void);",
	"iChangeThreadPriority" : "int iChangeThreadPriority(int thid, int priority);",
	"iClearEventFlag" : "int iClearEventFlag(int ef, u32 bits);",
	"iReferEventFlagStatus" : "int iReferEventFlagStatus(int ef, iop_event_info_t* info);",
	"iReferFplStatus" : "int iReferFplStatus(int fplId, iop_fpl_info_t *info);",
	"iReferMbxStatus" : "int iReferMbxStatus(int mbxid, iop_mbx_status_t *info);",
	"iReferSemaStatus" : "int iReferSemaStatus(int semid, iop_sema_info_t *info);",
	"iReferThreadStatus" : "int iReferThreadStatus(int thid, iop_thread_info_t *info);",
	"iReferVplStatus" : "int iReferVplStatus(int vplId, iop_vpl_info_t *info);",
	"iReleaseWaitThread" : "int iReleaseWaitThread(int thid);",
	"iResumeThread" : "int iResumeThread(int thid);",
	"iRotateThreadReadyQueue" : "int iRotateThreadReadyQueue(int priority);",
	"iSendMbx" : "int iSendMbx(int mbxid, void *msg);",
	"iSetAlarm" : "int iSetAlarm(iop_sys_clock_t *sys_clock, unsigned int (*alarm_cb)(void *), void *arg);",
	"iSetEventFlag" : "int iSetEventFlag(int ef, u32 bits);",
	"iSignalSema" : "int iSignalSema(int semid);",
	"iSuspendThread" : "int iSuspendThread(int thid);",
	"iTerminateThread" : "int iTerminateThread(int thid);",
	"iWakeupThread" : "int iWakeupThread(int thid);",
	"index" : "char *index(const char *s, int c);",
	"ioctl2" : "int ioctl2(int fd, int cmd, void *arg, unsigned int arglen, void *buf, unsigned int buflen);",
	"ipAllocateFpl" : "void *ipAllocateFpl(int fplId);",
	"ipAllocateVpl" : "void *ipAllocateVpl(int vplId, int size);",
	"isceSifSendCmd" : "unsigned int isceSifSendCmd(int cmd, void *packet, int packet_size, void *src_extra, void *dest_extra, int size_extra);",
	"isceSifSendCmdIntr" : "unsigned int isceSifSendCmdIntr(unsigned int, void *, int, void *, void *, int, void (*func)(), void *);",
	"look_ctype_table" : "unsigned char look_ctype_table(char character);",
	"lseek64" : "s64 lseek64(int fd, s64 offset, int whence);",
	"memchr" : "void *memchr(const void *s, int c, size_t n);",
	"memcmp" : "int memcmp(const void *p, const void *q, size_t size);",
	"memcpy" : "void * memcpy(void *dest, const void *src, size_t size);",
	"memmove" : "void *memmove(void *dest, const void *src, size_t size);",
	"memset" : "void * memset(void *ptr, int c, size_t size);",
	"mount" : "int mount(const char *fsname, const char *devname, int flag, void *arg, int arglen);",
	"mtapChangeSlot" : "s32 mtapChangeSlot(u32 port, u32 slot);",
	"mtapGetSlotNumber" : "s32 mtapGetSlotNumber(u32 port);",
	"mtapPortClose" : "s32 mtapPortClose(u32 port);",
	"mtapPortOpen" : "s32 mtapPortOpen(u32 port);",
	"pAllocateFpl" : "void *pAllocateFpl(int fplId);",
	"pAllocateVpl" : "void *pAllocateVpl(int vplId, int size);",
	"padEnd" : "int padEnd(void);",
	"padGetButtonMask" : "u32 padGetButtonMask(u32 port, u32 slot);",
	"padGetInBuffer" : "u32 padGetInBuffer(u32 port, u32 slot, u8 *buf);",
	"padGetModeConfig" : "u32 padGetModeConfig(u32 port, u32 slot);",
	"padInfoAct" : "s32 padInfoAct(u32 port, u32 slot, s32 act, u32 val);",
	"padInfoComb" : "s32 padInfoComb(u32 port, u32 slot, s32 listno, u32 offs);",
	"padInfoComb" : "s32 padInfoComb(u32 port, u32 slot, s32 val1, u32 val2);",
	"padInfoMode" : "s32 padInfoMode(u32 port, u32 slot, s32 term, u32 offs);",
	"padInit" : "s32 padInit(void * ee_addr);",
	"padPortClose" : "s32 padPortClose(s32 port, s32 slot, s32 wait);",
	"padPortOpen" : "s32 padPortOpen(s32 port, s32 slot, s32 pad_area_ee_addr, u32 *buf);",
	"padSetActAlign" : "u32 padSetActAlign(u32 port, u32 slot, u8 *actData);",
	"padSetActDirect" : "u32 padSetActDirect(u32 port, u32 slot, u8 *actData);",
	"padSetMainMode" : "u32 padSetMainMode(u32 port, u32 slot, u32 mode, u32 lock);",
	"padSetupEEButtonData" : "u32 padSetupEEButtonData(u32 port, u32 slot, void *pstate);",
	"printf" : "int printf(const char *format, ...);",
	"prnt" : "int prnt(print_callback_t, void *context, const char * format, va_list ap);",
	"putchar" : "int putchar(int c);",
	"puts" : "int puts(const char *s);",
	"readlink" : "int readlink(const char *path, char *buf, unsigned int buflen);",
	"rename" : "int rename(const char *oldname, const char *newname);",
	"rindex" : "char *rindex(const char *s, int c);",
	"sceCdApplyNCmd" : "int sceCdApplyNCmd(u8 cmdNum, const void* inBuff, u16 inBuffSize, void* outBuff, u16 outBuffSize);",
	"sceCdApplySCmd" : "int sceCdApplySCmd(u8 cmdNum, const void* inBuff, u16 inBuffSize, void *outBuff, u16 outBuffSize);",
	"sceCdApplySCmd2" : "int sceCdApplySCmd2(u8 cmdNum, const void* inBuff, unsigned long int inBuffSize, void *outBuff);",
	"sceCdAutoAdjustCtrl" : "int sceCdAutoAdjustCtrl(int mode, u32 *result);",
	"sceCdBlueLEDCtl" : "int sceCdBlueLEDCtl(u8 control, u32 *result);",
	"sceCdBootCertify" : "int sceCdBootCertify(const u8 *romname);",
	"sceCdBreak" : "int sceCdBreak(void);",
	"sceCdBuzzerCtl" : "int sceCdBuzzerCtl(u32 *result);",
	"sceCdCallback" : "sceCdCBFunc sceCdCallback(sceCdCBFunc function);",
	"sceCdCancelPOffRdy" : "int sceCdCancelPOffRdy(u32* result);",
	"sceCdChangeThreadPriority" : "int sceCdChangeThreadPriority(int priority);",
	"sceCdCheckCmd" : "int sceCdCheckCmd(void);",
	"sceCdChgSys" : "int sceCdChgSys(u32 arg1);",
	"sceCdCloseConfig" : "int sceCdCloseConfig(u32 *result);",
	"sceCdCtrlADout" : "int sceCdCtrlADout(int arg1, u32 *status);",
	"sceCdDecSet" : "int sceCdDecSet(unsigned char arg1, unsigned char arg2, unsigned char shift);",
	"sceCdDiskReady" : "int sceCdDiskReady(int mode);",
	"sceCdForbidDVDP" : "int sceCdForbidDVDP(u32 *result);",
	"sceCdForbidRead" : "int sceCdForbidRead(u32 *result);",
	"sceCdGetDiskType" : "int sceCdGetDiskType(void);",
	"sceCdGetError" : "int sceCdGetError(void);",
	"sceCdGetMediumRemoval" : "int sceCdGetMediumRemoval(u32 *result1, u32 *result2);",
	"sceCdGetReadPos" : "u32 sceCdGetReadPos(void);",
	"sceCdGetToc" : "int sceCdGetToc(u8 *toc);",
	"sceCdGetWakeUpReason" : "int sceCdGetWakeUpReason(void);",
	"sceCdInit" : "int sceCdInit(int mode);",
	"sceCdIntToPos" : "sceCdlLOCCD *sceCdIntToPos(u32 i, sceCdlLOCCD *p);",
	"sceCdLayerSearchFile" : "int sceCdLayerSearchFile(sceCdlFILE *fp, const char *path, int layer);",
	"sceCdMV" : "int sceCdMV(u8 *buffer, u32 *status);",
	"sceCdMmode" : "int sceCdMmode(int media);",
	"sceCdNop" : "int sceCdNop(void);",
	"sceCdNoticeGameStart" : "int sceCdNoticeGameStart(u8 arg1, u32 *result);",
	"sceCdOpenConfig" : "int sceCdOpenConfig(int block, int mode, int NumBlocks);",
	"sceCdPOffCallback" : "void *sceCdPOffCallback(void(*func)(void *),void *addr);",
	"sceCdPause" : "int sceCdPause(void);",
	"sceCdPosToInt" : "u32 sceCdPosToInt(sceCdlLOCCD *p);",
	"sceCdPowerOff" : "int sceCdPowerOff(u32 *result);",
	"sceCdRC" : "int sceCdRC(sceCdCLOCK *clock);",
	"sceCdRE" : "int sceCdRE(unsigned long int lsn,unsigned long int sectors,void *buf,sceCdRMode *mode);",
	"sceCdRI" : "int sceCdRI(u8 *buffer, u32 *result);",
	"sceCdRM" : "int sceCdRM(char *buffer, u32 *status);",
	"sceCdRcBypassCtl" : "int sceCdRcBypassCtl(int mode, u32 *status);",
	"sceCdRead" : "int sceCdRead(u32 lbn, u32 sectors, void *buffer, sceCdRMode *mode);",
	"sceCdRead0" : "int sceCdRead0(u32 lsn, u32 sectors, void *buffer, sceCdRMode *mode, int csec, void *callback);",
	"sceCdReadCDDA" : "int sceCdReadCDDA(u32 lbn, u32 sectors, void *buffer, sceCdRMode *mode);",
	"sceCdReadChain" : "int sceCdReadChain(sceCdRChain *tag, sceCdRMode *mode);",
	"sceCdReadClock" : "int sceCdReadClock(sceCdCLOCK *clock);",
	"sceCdReadConfig" : "int sceCdReadConfig(void *buffer, u32 *result);",
	"sceCdReadConsoleID" : "int sceCdReadConsoleID(u8 *buffer, u32 *result);",
	"sceCdReadDVDV" : "int sceCdReadDVDV(u32 lbn, u32 sectors, void *buffer, sceCdRMode *mode);",
	"sceCdReadDiskID" : "int sceCdReadDiskID(unsigned int *id);",
	"sceCdReadDvdDualInfo" : "int sceCdReadDvdDualInfo(int *on_dual, unsigned long int *layer1_start);",
	"sceCdReadFull" : "int sceCdReadFull(unsigned long int lsn, unsigned long int sectors, void *buf, sceCdRMode *mode);",
	"sceCdReadGUID" : "int sceCdReadGUID(u64 *guid);",
	"sceCdReadKey" : "int sceCdReadKey(unsigned char arg1, unsigned char arg2, unsigned int command, unsigned char *key);",
	"sceCdReadModelID" : "int sceCdReadModelID(unsigned long int *id);",
	"sceCdReadNVM" : "int sceCdReadNVM(u32 address, u16 *data, u8 *result);",
	"sceCdReadPS1BootParam" : "int sceCdReadPS1BootParam(u8 *out, u32 *result);",
	"sceCdReadRegionParams" : "int sceCdReadRegionParams(u32 *arg1, u32 *result);",
	"sceCdReadSUBQ" : "int sceCdReadSUBQ(void *buffer, u32 *status);",
	"sceCdReadWakeUpTime" : "int sceCdReadWakeUpTime(sceCdCLOCK *clock, u16 *arg2, u32 *arg3, int *arg4);",
	"sceCdSC" : "int sceCdSC(int code, int *param);",
	"sceCdSearchFile" : "int sceCdSearchFile(sceCdlFILE *file, const char *name);",
	"sceCdSeek" : "int sceCdSeek(u32 lbn);",
	"sceCdSetFanProfile" : "int sceCdSetFanProfile(u8 arg1, u32 *result);",
	"sceCdSetHDMode" : "int sceCdSetHDMode(u32 mode);",
	"sceCdSetLEDsMode" : "int sceCdSetLEDsMode(u32 arg1, u32 *result);",
	"sceCdSetMediumRemoval" : "int sceCdSetMediumRemoval(u8 arg1, u32 *result);",
	"sceCdSetTimeout" : "int sceCdSetTimeout(int param, int timeout);",
	"sceCdSpinCtrlIOP" : "int sceCdSpinCtrlIOP(u32 speed);",
	"sceCdStInit" : "int sceCdStInit(u32 bufmax, u32 bankmax, void *buffer);",
	"sceCdStPause" : "int sceCdStPause(void);",
	"sceCdStRead" : "int sceCdStRead(u32 sectors, u32 *buffer, u32 mode, u32 *error);",
	"sceCdStResume" : "int sceCdStResume(void);",
	"sceCdStSeek" : "int sceCdStSeek(u32 lbn);",
	"sceCdStSeekF" : "int sceCdStSeekF(unsigned long int lsn);",
	"sceCdStStart" : "int sceCdStStart(u32 lbn, sceCdRMode *mode);",
	"sceCdStStat" : "int sceCdStStat(void);",
	"sceCdStStop" : "int sceCdStStop(void);",
	"sceCdStandby" : "int sceCdStandby(void);",
	"sceCdStatus" : "int sceCdStatus(void);",
	"sceCdStatus2" : "int sceCdStatus2(void);",
	"sceCdStop" : "int sceCdStop(void);",
	"sceCdSync" : "int sceCdSync(int mode);",
	"sceCdTrayReq" : "int sceCdTrayReq(int param, u32 *traychk);",
	"sceCdWI" : "int sceCdWI(const u8 *buffer, u32 *result);",
	"sceCdWM" : "int sceCdWM(const char *buffer, u32 *status);",
	"sceCdWriteClock" : "int sceCdWriteClock(const sceCdCLOCK *clock);",
	"sceCdWriteConfig" : "int sceCdWriteConfig(const void *buffer, u32 *result);",
	"sceCdWriteConsoleID" : "int sceCdWriteConsoleID(const u8 *buffer, u32 *status);",
	"sceCdWriteNVM" : "int sceCdWriteNVM(u32 address, u16 data, u8 *result);",
	"sceCdWriteRegionParams" : "int sceCdWriteRegionParams(u8 arg1, u32 *arg2, u8 *arg3, u32 *result);",
	"sceCdWriteWakeUpTime" : "int sceCdWriteWakeUpTime(const sceCdCLOCK *clock, u16 arg2, int arg3);",
	"sceCdXBSPowerCtl" : "int sceCdXBSPowerCtl(u8 arg1, u8 arg2, u32 *result1, u32 *result2);",
	"sceCdXDVRPReset" : "int sceCdXDVRPReset(u8 arg1, u32 *result);",
	"sceCdXLEDCtl" : "int sceCdXLEDCtl(u8 arg1, u8 arg2, u32 *result1, u32 *result2);",
	"sceCdstm0Cb" : "int sceCdstm0Cb(void (*p)(int));",
	"sceCdstm1Cb" : "int sceCdstm1Cb(void (*p)(int));",
	"sceGetFsvRbuf" : "void *sceGetFsvRbuf(void);",
	"sceRemote2_7" : "int sceRemote2_7(u16 a1, u32 *a2);",
	"sceSdBlockTrans" : "int sceSdBlockTrans(s16 chan, u16 mode, u8 *iopaddr, u32 size, ...);",
	"sceSdBlockTransStatus" : "u32 sceSdBlockTransStatus (s16 channel, s16 flag);",
	"sceSdCleanEffectWorkArea" : "int sceSdCleanEffectWorkArea(int core, int channel, int effect_mode);",
	"sceSdClearEffectWorkArea" : "int sceSdClearEffectWorkArea (int core, int channel, int effect_mode);",
	"sceSdGetAddr" : "u32 sceSdGetAddr(u16 entry );",
	"sceSdGetCoreAttr" : "u16 sceSdGetCoreAttr(u16 entry );",
	"sceSdGetEffectAttr" : "void sceSdGetEffectAttr (int core, sceSdEffectAttr *attr );",
	"sceSdGetParam" : "u16 sceSdGetParam(u16 entry);",
	"sceSdGetSpu2IntrHandlerArgument" : "void *sceSdGetSpu2IntrHandlerArgument();",
	"sceSdGetSwitch" : "u32 sceSdGetSwitch(u16 entry );",
	"sceSdGetTransIntrHandlerArgument" : "void *sceSdGetTransIntrHandlerArgument(int arg);",
	"sceSdInit" : "int sceSdInit(int flag);",
	"sceSdNote2Pitch" : "u16 sceSdNote2Pitch (u16 center_note, u16 center_fine, u16 note, s16 fine);",
	"sceSdPitch2Note" : "u16 sceSdPitch2Note (u16 center_note, u16 center_fine, u16 pitch);",
	"sceSdProcBatch" : "int sceSdProcBatch(sceSdBatch *batch, u32 *rets, u32 num);",
	"sceSdProcBatchEx" : "int sceSdProcBatchEx(sceSdBatch *batch, u32 *rets, u32 num, u32 voice);",
	"sceSdQuit" : "int sceSdQuit();",
	"sceSdSetAddr" : "void sceSdSetAddr(u16 entry, u32 value);",
	"sceSdSetCoreAttr" : "void sceSdSetCoreAttr(u16 entry, u16 value );",
	"sceSdSetEffectAttr" : "int sceSdSetEffectAttr (int core, sceSdEffectAttr *attr );",
	"sceSdSetEffectMode" : "int sceSdSetEffectMode(int core, sceSdEffectAttr *param);",
	"sceSdSetEffectModeParams" : "int sceSdSetEffectModeParams(int core, sceSdEffectAttr *attr);",
	"sceSdSetIRQCallback" : "SdIntrCallback sceSdSetIRQCallback(SdIntrCallback cb);",
	"sceSdSetParam" : "void sceSdSetParam(u16 entry, u16 value);",
	"sceSdSetSpu2IntrHandler" : "sceSdSpu2IntrHandler sceSdSetSpu2IntrHandler(sceSdSpu2IntrHandler func, void *arg);",
	"sceSdSetSwitch" : "void sceSdSetSwitch(u16 entry, u32 value);",
	"sceSdSetTransCallback" : "SdIntrCallback sceSdSetTransCallback(s32 core, SdIntrCallback cb);",
	"sceSdSetTransIntrHandler" : "sceSdTransIntrHandler sceSdSetTransIntrHandler(int channel, sceSdTransIntrHandler func, void *arg);",
	"sceSdStopTrans" : "int sceSdStopTrans(int channel);",
	"sceSdVoiceTrans" : "int sceSdVoiceTrans(s16 chan, u16 mode, u8 *iopaddr, u32 *spuaddr, u32 size);",
	"sceSdVoiceTransStatus" : "u32 sceSdVoiceTransStatus (s16 channel, s16 flag);",
	"sceSifAddCmdHandler" : "void sceSifAddCmdHandler(int cid, SifCmdHandler_t handler, void *harg);",
	"sceSifBindRpc" : "int sceSifBindRpc(SifRpcClientData_t * client, int rpc_number, int mode);",
	"sceSifCallRpc" : "int sceSifCallRpc(SifRpcClientData_t * client, int rpc_number, int mode, void *send, int ssize, void *receive, int rsize, SifRpcEndFunc_t end_function, void *end_param);",
	"sceSifCheckInit" : "int sceSifCheckInit();",
	"sceSifCheckStatRpc" : "int sceSifCheckStatRpc(SifRpcClientData_t * cd);",
	"sceSifClearSif1CB" : "void sceSifClearSif1CB(void);",
	"sceSifDma0Sending" : "int sceSifDma0Sending();",
	"sceSifDma0Sync" : "void sceSifDma0Sync();",
	"sceSifDma0Transfer" : "void sceSifDma0Transfer(void *addr, int size, int mode);",
	"sceSifDma1Sending" : "int sceSifDma1Sending();",
	"sceSifDma1Sync" : "void sceSifDma1Sync();",
	"sceSifDma1Transfer" : "void sceSifDma1Transfer(void *addr, int size, int mode);",
	"sceSifDma2Init" : "void sceSifDma2Init();",
	"sceSifDma2Sending" : "int sceSifDma2Sending();",
	"sceSifDma2Sync" : "void sceSifDma2Sync();",
	"sceSifDma2Transfer" : "void sceSifDma2Transfer(void *addr, int size, int mode);",
	"sceSifDmaStat" : "int sceSifDmaStat(int trid);",
	"sceSifExecRequest" : "void sceSifExecRequest(SifRpcServerData_t * srv);",
	"sceSifExitCmd" : "void sceSifExitCmd(void);",
	"sceSifGetMSFlag" : "u32 sceSifGetMSFlag();",
	"sceSifGetMainAddr" : "u32 sceSifGetMainAddr();",
	"sceSifGetNextRequest" : "SifRpcServerData_t *sceSifGetNextRequest(SifRpcDataQueue_t * qd);",
	"sceSifGetOtherData" : "int sceSifGetOtherData(SifRpcReceiveData_t *rd, void *src, void *dest, int size, int mode);",
	"sceSifGetSMFlag" : "u32 sceSifGetSMFlag();",
	"sceSifGetSreg" : "void sceSifGetSreg(int index);",
	"sceSifGetSubAddr" : "u32 sceSifGetSubAddr();",
	"sceSifInit" : "void sceSifInit();",
	"sceSifInitCmd" : "void sceSifInitCmd(void);",
	"sceSifInitRpc" : "void sceSifInitRpc(int mode);",
	"sceSifIntrMain" : "void sceSifIntrMain();",
	"sceSifIsSending" : "int sceSifIsSending();",
	"sceSifRegisterRpc" : "void sceSifRegisterRpc(SifRpcServerData_t *sd, int sid, SifRpcFunc_t func, void *buf, SifRpcFunc_t cfunc, void *cbuf, SifRpcDataQueue_t *qd);",
	"sceSifRemoveCmdHandler" : "void sceSifRemoveCmdHandler(int cid);",
	"sceSifRemoveRpc" : "SifRpcServerData_t *sceSifRemoveRpc(SifRpcServerData_t *sd, SifRpcDataQueue_t *qd);",
	"sceSifRemoveRpcQueue" : "SifRpcDataQueue_t *sceSifRemoveRpcQueue(SifRpcDataQueue_t *qd);",
	"sceSifResetDmaIntrHandler" : "void sceSifResetDmaIntrHandler();",
	"sceSifRpcLoop" : "void sceSifRpcLoop(SifRpcDataQueue_t *qd);",
	"sceSifSendCmd" : "unsigned int sceSifSendCmd(int cmd, void *packet, int packet_size, void *src_extra, void *dest_extra, int size_extra);",
	"sceSifSendCmdIntr" : "unsigned int sceSifSendCmdIntr(unsigned int, void *, int, void *, void *, int, void (*func)(), void *);",
	"sceSifSendSync" : "void sceSifSendSync();",
	"sceSifSetCmdBuffer" : "void sceSifSetCmdBuffer(SifCmdHandlerData_t *cmdBuffer, int size);",
	"sceSifSetDChain" : "void sceSifSetDChain();",
	"sceSifSetDma" : "int sceSifSetDma(SifDmaTransfer_t *dmat, int count);",
	"sceSifSetDmaIntr" : "unsigned int sceSifSetDmaIntr(SifDmaTransfer_t *dmat, int len, void (*func)(), void *data);",
	"sceSifSetDmaIntrHandler" : "void sceSifSetDmaIntrHandler(void (*handler)(void *), void *arg);",
	"sceSifSetMSFlag" : "u32 sceSifSetMSFlag(u32 val);",
	"sceSifSetOneDma" : "void sceSifSetOneDma(SifDmaTransfer_t dmat);",
	"sceSifSetRpcQueue" : "SifRpcDataQueue_t * sceSifSetRpcQueue(SifRpcDataQueue_t *q, int thread_id);",
	"sceSifSetSMFlag" : "u32 sceSifSetSMFlag(u32 val);",
	"sceSifSetSif1CB" : "void sceSifSetSif1CB(void *func, int param);",
	"sceSifSetSreg" : "void sceSifSetSreg(int index, unsigned int value);",
	"sceSifSetSubAddr" : "u32 sceSifSetSubAddr(u32 addr);",
	"sceSifSetSysCmdBuffer" : "void sceSifSetSysCmdBuffer(SifCmdHandlerData_t *sysCmdBuffer, int size);",
	"sio2_ctrl_get" : "u32 sio2_ctrl_get(void);",
	"sio2_ctrl_set" : "void sio2_ctrl_set(u32 val);",
	"sio2_data_in" : "u8 sio2_data_in(void);",
	"sio2_data_out" : "void sio2_data_out(u8 val);",
	"sio2_mc_transfer_init" : "void sio2_mc_transfer_init(void);",
	"sio2_mtap_change_slot" : "int sio2_mtap_change_slot(s32 *arg);",
	"sio2_mtap_change_slot_set" : "void sio2_mtap_change_slot_set(sio2_mtap_change_slot_cb_t cb);",
	"sio2_mtap_get_slot_max" : "int sio2_mtap_get_slot_max(int port);",
	"sio2_mtap_get_slot_max2" : "int sio2_mtap_get_slot_max2(int port);",
	"sio2_mtap_get_slot_max2_set" : "void sio2_mtap_get_slot_max2_set(sio2_mtap_get_slot_max2_cb_t cb);",
	"sio2_mtap_get_slot_max_set" : "void sio2_mtap_get_slot_max_set(sio2_mtap_get_slot_max_cb_t cb);",
	"sio2_mtap_transfer_init" : "void sio2_mtap_transfer_init(void);",
	"sio2_mtap_update_slots" : "void sio2_mtap_update_slots(void);",
	"sio2_mtap_update_slots_set" : "void sio2_mtap_update_slots_set(sio2_mtap_update_slots_t cb);",
	"sio2_pad_transfer_init" : "void sio2_pad_transfer_init(void);",
	"sio2_portN_ctrl1_get" : "u32 sio2_portN_ctrl1_get(int N);",
	"sio2_portN_ctrl1_set" : "void sio2_portN_ctrl1_set(int N, u32 val);",
	"sio2_portN_ctrl2_get" : "u32 sio2_portN_ctrl2_get(int N);",
	"sio2_portN_ctrl2_set" : "void sio2_portN_ctrl2_set(int N, u32 val);",
	"sio2_regN_get" : "u32 sio2_regN_get(int N);",
	"sio2_regN_set" : "void sio2_regN_set(int N, u32 val);",
	"sio2_stat6c_get" : "u32 sio2_stat6c_get(void);",
	"sio2_stat70_get" : "u32 sio2_stat70_get(void);",
	"sio2_stat74_get" : "u32 sio2_stat74_get(void);",
	"sio2_stat_get" : "u32 sio2_stat_get(void);",
	"sio2_stat_set" : "void sio2_stat_set(u32 val);",
	"sio2_transfer" : "int sio2_transfer(sio2_transfer_data_t *td);",
	"sio2_transfer2" : "int sio2_transfer2(sio2_transfer_data_t *td);",
	"sio2_transfer_reset" : "void sio2_transfer_reset(void);",
	"sio2_transfer_reset2" : "void sio2_transfer_reset2(void);",
	"sio2_unkn78_get" : "u32 sio2_unkn78_get(void);",
	"sio2_unkn78_set" : "void sio2_unkn78_set(u32 val);",
	"sio2_unkn7c_get" : "u32 sio2_unkn7c_get(void);",
	"sio2_unkn7c_set" : "void sio2_unkn7c_set(u32 val);",
	"sprintf" : "int sprintf(char *str, const char *format, ...);",
	"strcat" : "char *strcat(char *dest, const char *src);",
	"strchr" : "char *strchr(const char *s, int c);",
	"strcmp" : "int strcmp(const char *p, const char *q);",
	"strcpy" : "char *strcpy(char *dest, const char *src);",
	"strcspn" : "size_t strcspn(const char *s, const char *reject);",
	"strlen" : "size_t strlen(const char *s);",
	"strncat" : "char *strncat(char *dest, const char *src, size_t size);",
	"strncmp" : "int strncmp(const char *p, const char *q, size_t size);",
	"strncpy" : "char *strncpy(char *dest, const char *src, size_t size);",
	"strpbrk" : "char *strpbrk(const char *s, const char *accept);",
	"strrchr" : "char *strrchr(const char *s, int c);",
	"strspn" : "size_t strspn(const char *s, const char *accept);",
	"strstr" : "char *strstr(const char *haystack, const char *needle);",
	"strtok" : "char *strtok(char *s, const char *delim);",
	"strtok_r" : "char *strtok_r(char *s, const char *delim, char **lasts);",
	"strtol" : "long strtol(const char *s, char **endptr, int base);",
	"strtoul" : "unsigned long strtoul(const char *s, char **endptr, int base);",
	"symlink" : "int symlink(const char *oldname, const char *newname);",
	"sync" : "int sync(const char *dev, int flag);",
	"umount" : "int umount(const char *fsname);",
	"vfdprintf" : "int vfdprintf(int fd, const char *format, va_list ap);",
	"vsprintf" : "int vsprintf(char *buf, const char *fmt, va_list ap);",

	"sceMidiDelay_Init" : "int sceMidiDelay_Init(sceCslCtx* module_context);",
	"sceMidiDelay_ATick" : "int sceMidiDelay_ATick(sceCslCtx* module_context);",
	"sceMidiDelay_Flush" : "int sceMidiDelay_Flush(sceCslCtx* module_context);",
	"sceHSyn_Init" : "int sceHSyn_Init(sceCslCtx* module_context, unsigned int interval);",
	"sceHSyn_ATick" : "int sceHSyn_ATick(sceCslCtx* module_context);",
	"sceHSyn_Load" : "int sceHSyn_Load(sceCslCtx* module_context, unsigned int port_number, void* spu2_wave_address, void* header_address, unsigned int bank);",
	"sceHSyn_VoiceTrans" : "int sceHSyn_VoiceTrans(short channel, unsigned char* data_address, unsigned char* spu2_address, unsigned int size);",
	"sceHSyn_SetReservVoice" : "int sceHSyn_SetReservVoice(unsigned int *voice_bit);",
	"sceHSyn_SetEffectAttr" : "int sceHSyn_SetEffectAttr(sceHSyn_EffectAttr* effect_attribute);",
	"sceHSyn_SetVolume" : "int sceHSyn_SetVolume(sceCslCtx* module_context, unsigned int port_number, unsigned short vol);",
	"sceHSyn_GetVolume" : "unsigned short sceHSyn_GetVolume(sceCslCtx* module_context, unsigned int port_number);",
	"sceHSyn_AllNoteOff" : "int sceHSyn_AllNoteOff(sceCslCtx* module_context, unsigned int port_number);",
	"sceHSyn_AllSoundOff" : "int sceHSyn_AllSoundOff(sceCslCtx* module_context, unsigned int port_number);",
	"sceHSyn_ResetAllControler" : "int sceHSyn_ResetAllControler(sceCslCtx* module_context, unsigned int port_number);",
	"sceHSyn_SetVoiceStatBuffer" : "int sceHSyn_SetVoiceStatBuffer(sceHSyn_VoiceStat* status_buffer);",
	"sceHSyn_SetDebugInfoBuffer" : "int sceHSyn_SetDebugInfoBuffer(sceHSyn_DebugInfo* debug_info_buffer);",
	"sceHSyn_GetChStat" : "int sceHSyn_GetChStat(sceCslCtx* module_context, unsigned int port_number, sceHSynChStat* buff_addr);",
	"sceHSyn_SetOutputMode" : "int sceHSyn_SetOutputMode(int output_mode);",
	"sceHSyn_SESetMaxVoices" : "int sceHSyn_SESetMaxVoices(unsigned char max_voices);",
	"sceHSyn_SEAllNoteOff" : "int sceHSyn_SEAllNoteOff(sceCslCtx* module_context, unsigned int port_number);",
	"sceHSyn_SEAllSoundOff" : "int sceHSyn_SEAllSoundOff(sceCslCtx* module_context, unsigned int port_number);",
	"sceHSyn_SERetrieveVoiceNumberByID" : "int sceHSyn_SERetrieveVoiceNumberByID(sceCslCtx* module_context, unsigned int port_number, unsigned int id, char * ret, char max_voices);",
	"sceHSyn_MSGetVoiceStateByID" : "int sceHSyn_MSGetVoiceStateByID(sceCslCtx* module_context, unsigned int port_number, unsigned char id, unsigned char * ret, char max_voices);",
	"sceHSyn_MSGetVoiceEnvelopeByID" : "int sceHSyn_MSGetVoiceEnvelopeByID(sceCslCtx* module_context, unsigned int port_number, unsigned char id, unsigned short * ret, char max_voices);",
	"sceHSyn_SERetrieveAllSEMsgIDs" : "int sceHSyn_SERetrieveAllSEMsgIDs(sceCslCtx* module_context, unsigned int port_number, unsigned int * ret, int max_voices);",
	"sceHSyn_GetReservVoice" : "int sceHSyn_GetReservVoice(unsigned int *voice_bit);",
	"sceHSyn_GetOutputMode" : "int sceHSyn_GetOutputMode(void);",
	"sceHSyn_Unload" : "int sceHSyn_Unload(sceCslCtx* module_context, unsigned int port_number,unsigned int bank);",
	"sceHSyn_SetIdMonitor" : "int sceHSyn_SetIdMonitor(sceCslIdMonitor *id_monitor);",
	"sceMidi_Init" : "int sceMidi_Init(sceCslCtx* module_context, unsigned int interval);",
	"sceMidi_ATick" : "int sceMidi_ATick(sceCslCtx* module_context);",
	"sceMidi_Load" : "int sceMidi_Load(sceCslCtx* module_context, unsigned int port_number);",
	"sceMidi_SelectSong" : "int sceMidi_SelectSong(sceCslCtx* module_context, unsigned int port_number, unsigned int song_block_number);",
	"sceMidi_SongPlaySwitch" : "int sceMidi_SongPlaySwitch(sceCslCtx* module_context, unsigned int port_number, int command);",
	"sceMidi_SongSetVolume" : "int sceMidi_SongSetVolume(sceCslCtx* module_context, unsigned int port_number, unsigned char vol);",
	"sceMidi_SongVolumeChange" : "int sceMidi_SongVolumeChange(sceCslCtx* module_context, unsigned int port_number, unsigned char vol);",
	"sceMidi_SongSetAbsoluteTempo" : "int sceMidi_SongSetAbsoluteTempo(sceCslCtx* module_context, unsigned int port_number, unsigned char tempo);",
	"sceMidi_SongSetRelativeTempo" : "int sceMidi_SongSetRelativeTempo(sceCslCtx* module_context, unsigned int port_number, unsigned short tempo);",
	"sceMidi_SongSetLocation" : "int sceMidi_SongSetLocation(sceCslCtx* module_context, unsigned int port_number, unsigned int position, unsigned int mode);",
	"sceMidi_SelectMidi" : "int sceMidi_SelectMidi(sceCslCtx* module_context, unsigned int port_number, unsigned int midi_block_number);",
	"sceMidi_MidiPlaySwitch" : "int sceMidi_MidiPlaySwitch(sceCslCtx* module_context, unsigned int port_number, int command);",
	"sceMidi_MidiSetLocation" : "int sceMidi_MidiSetLocation(sceCslCtx* module_context, unsigned int port_number, unsigned int position);",
	"sceMidi_MidiSetVolume" : "int sceMidi_MidiSetVolume(sceCslCtx* module_context, unsigned int port_number, unsigned char ch, unsigned char vol);",
	"sceMidi_MidiVolumeChange" : "int sceMidi_MidiVolumeChange(sceCslCtx* module_context, unsigned int port_number, unsigned char ch, unsigned char vol);",
	"sceMidi_MidiSetAbsoluteTempo" : "int sceMidi_MidiSetAbsoluteTempo(sceCslCtx* module_context, unsigned int port_number, unsigned char tempo);",
	"sceMidi_MidiGetAbsoluteTempo" : "unsigned char sceMidi_MidiGetAbsoluteTempo(sceCslCtx* module_context, unsigned int port_number);",
	"sceMidi_MidiSetRelativeTempo" : "int sceMidi_MidiSetRelativeTempo(sceCslCtx* module_context, unsigned int port_number, unsigned short tempo);",
	"sceMidi_MidiGetRelativeTempo" : "unsigned short sceMidi_MidiGetRelativeTempo(sceCslCtx* module_context, unsigned int port_number);",
	"sceMidi_MidiSetUSecTempo" : "int sceMidi_MidiSetUSecTempo(sceCslCtx* module_context, unsigned int port_number, unsigned int tempo);",
	"sceMidi_MidiGetUSecTempo" : "unsigned int sceMidi_MidiGetUSecTempo(sceCslCtx* module_context, unsigned int port_number);",
	"sceMidi_Unload" : "int sceMidi_Unload(sceCslCtx* module_context, unsigned int port_number);",
	"sceMidiMono_Init" : "int sceMidiMono_Init(sceCslCtx* module_context);",
	"sceMidiMono_ATick" : "int sceMidiMono_ATick(sceCslCtx* module_context);",
	"sceMidiMono_SetMono" : "int sceMidiMono_SetMono(sceCslCtx* module_context, unsigned int port_number, unsigned char channel, int switch_);",
	"sceMSIn_Init" : "int sceMSIn_Init(sceCslCtx* module_context);",
	"sceMSIn_ATick" : "int sceMSIn_ATick(sceCslCtx* module_context);",
	"sceMSIn_Load" : "int sceMSIn_Load(sceCslCtx* module_context);",
	"sceMSIn_PutMsg" : "int sceMSIn_PutMsg(sceCslCtx* module_context, unsigned int port_number, unsigned int midi_message);",
	"sceMSIn_PutExcMsg" : "int sceMSIn_PutExcMsg(sceCslCtx* module_context, unsigned int port_number, unsigned char* exc_data_addr, unsigned int exc_data_length);",
	"sceMSIn_PutHsMsg" : "int sceMSIn_PutHsMsg(sceCslCtx* module_context, unsigned int port_number, sceMSInHsMsg* hs_message);",
	"sceSEIn_Init" : "int sceSEIn_Init(sceCslCtx* module_context);",
	"sceSEIn_ATick" : "int sceSEIn_ATick(sceCslCtx* module_context);",
	"sceSEIn_Load" : "int sceSEIn_Load(sceCslCtx* module_context);",
	"sceSEIn_PutMsg" : "int sceSEIn_PutMsg(sceCslCtx* module_context, unsigned int port_number, unsigned int id, unsigned int se_msg1, unsigned int se_msg2);",
	"sceSEIn_PutSEMsg" : "int sceSEIn_PutSEMsg(sceCslCtx* module_context, unsigned int port_number, unsigned int id, unsigned char * msg, unsigned int msg_length);",
	"sceSEIn_MakeNoteOn" : "int sceSEIn_MakeNoteOn(sceCslCtx* module_context, unsigned int port_number, unsigned int id, unsigned int bank_number, unsigned int prog_number, unsigned int note_number, unsigned int velocity, int panpot);",
	"sceSEIn_MakePitchOn" : "int sceSEIn_MakePitchOn(sceCslCtx* module_context, unsigned int port_number, unsigned int id, unsigned int bank_number, unsigned int prog_number, unsigned int note_number, unsigned int velocity, int panpot, unsigned int pitch);",
	"sceSEIn_MakeTimeVolume" : "int sceSEIn_MakeTimeVolume(sceCslCtx* module_context, unsigned int port_number, unsigned int id, unsigned int bank_number, unsigned int prog_number, unsigned int note_number, unsigned int delta_time, unsigned int target_volume);",
	"sceSEIn_MakeTimePanpot" : "int sceSEIn_MakeTimePanpot(sceCslCtx* module_context, unsigned int port_number, unsigned int id, unsigned int bank_number, unsigned int prog_number, unsigned int note_number, unsigned int delta_time, int target_panpot, unsigned int command);",
	"sceSEIn_MakeTimePitch" : "int sceSEIn_MakeTimePitch(sceCslCtx* module_context, unsigned int port_number, unsigned int id, unsigned int bank_number, unsigned int prog_number, unsigned int note_number, unsigned int delta_time, unsigned int target_pitch, unsigned int command);",
	"sceSEIn_MakePitchLFO" : "int sceSEIn_MakePitchLFO(sceCslCtx* module_context, unsigned int port_number, unsigned int id, unsigned int bank_number, unsigned int prog_number, unsigned int note_number, unsigned int depth_cycle, unsigned int command);",
	"sceSEIn_MakeAmpLFO" : "int sceSEIn_MakeAmpLFO(sceCslCtx* module_context, unsigned int port_number, unsigned int id, unsigned int bank_number, unsigned int prog_number, unsigned int note_number, unsigned int depth_cycle, unsigned int command);",
	"sceSEIn_MakeAllNoteOff" : "int sceSEIn_MakeAllNoteOff(sceCslCtx* module_context, unsigned int port_number, unsigned int id);",
	"sceSEIn_MakeAllNoteOffMask" : "int sceSEIn_MakeAllNoteOffMask(sceCslCtx* module_context, unsigned int port_number, unsigned int id, unsigned int base_id, unsigned int mask);",
	"sceSEIn_MakeNoteOnZero" : "int sceSEIn_MakeNoteOnZero(sceCslCtx* module_context, unsigned int port_number, unsigned int id, unsigned int bank_number, unsigned int prog_number, unsigned int note_number, unsigned int velocity, int panopt);",
	"sceSEIn_MakePitchOnZero" : "int sceSEIn_MakePitchOnZero(sceCslCtx* module_context, unsigned int port_number, unsigned int id, unsigned int bank_number, unsigned int prog_number, unsigned int note_number, unsigned int velocity, int panpot, unsigned int pitch);",
	"sceSESq_Init" : "int sceSESq_Init(sceCslCtx* module_context, unsigned int interval);",
	"sceSESq_ATick" : "int sceSESq_ATick(sceCslCtx* module_context);",
	"sceSESq_Load" : "int sceSESq_Load(sceCslCtx* module_context, unsigned int port_number);",
	"sceSESq_SelectSeq" : "int sceSESq_SelectSeq(sceCslCtx* module_context, unsigned int port_number, unsigned char set_number, unsigned char seq_number);",
	"sceSESq_UnselectSeq" : "int sceSESq_UnselectSeq(sceCslCtx* module_context, unsigned int port_number, int sesq_id);",
	"sceSESq_SeqPlaySwitch" : "int sceSESq_SeqPlaySwitch(sceCslCtx* module_context, unsigned int port_number, int sesq_id, int command);",
	"sceSESq_SeqGetStatus" : "int sceSESq_SeqGetStatus(sceCslCtx* module_context, unsigned int port_number, int sesq_id);",
	"sceSESq_SeqIsInPlay" : "int sceSESq_SeqIsInPlay(sceCslCtx* module_context, unsigned int port_number, int sesq_id);",
	"sceSESq_SeqIsDataEnd" : "int sceSESq_SeqIsDataEnd(sceCslCtx* module_context, unsigned int port_number, int sesq_id);",
	"sceSESq_SeqSetSEMsgID" : "int sceSESq_SeqSetSEMsgID(sceCslCtx* module_context, unsigned int port_number, int sesq_id, unsigned int se_message_id);",
	"sceSESq_SeqTerminateVoice" : "int sceSESq_SeqTerminateVoice(sceCslCtx* module_context, unsigned int in_port_number, unsigned int out_port_number, unsigned int se_message_id, unsigned int mask);",
	"sceSESq2Init" : "int sceSESq2Init(sceCslCtx* module_context, unsigned int interval);",
	"sceSESq2ATick" : "int sceSESq2ATick(sceCslCtx* module_context);",
	"sceSESq2Load" : "int sceSESq2Load(sceCslCtx* module_context, unsigned int port_number);",
	"sceSESq2GetStatus" : "int sceSESq2GetStatus(sceCslCtx* module_context, unsigned int port_number, int message_id);",
	"sceSESq2IsInPlay" : "int sceSESq2IsInPlay(sceCslCtx* module_context, unsigned int port_number, int message_id);",
	"sceSESq2IsDataEnd" : "int sceSESq2IsDataEnd(sceCslCtx* module_context, unsigned int port_number, int message_id);",
	"sceSESq2SetIdMonitor" : "int sceSESq2SetIdMonitor(sceCslIdMonitor *id_monitor);",
	"sceSESq2Play" : "int sceSESq2Play(sceCslCtx* module_context, unsigned int port, unsigned char setNo, unsigned char seqNo, unsigned char volume, unsigned char panpot, short pitch);",
	"sceSESq2Stop" : "int sceSESq2Stop(sceCslCtx* module_context, unsigned int message_id);",
	"sceSESq2Pause" : "int sceSESq2Pause(sceCslCtx* module_context, unsigned int message_id, unsigned int mode);",
	"sceSESq2Resume" : "int sceSESq2Resume(sceCslCtx* module_context, unsigned int message_id);",
	"sceSESq2SetVolume" : "int sceSESq2SetVolume(sceCslCtx* module_context, unsigned int message_id, unsigned char id_volume, unsigned int time);",
	"sceSESq2SetPanpot" : "int sceSESq2SetPanpot(sceCslCtx* module_context, unsigned int message_id, unsigned char id_panpot, unsigned int time);",
	"sceSESq2SetPitch" : "int sceSESq2SetPitch(sceCslCtx* module_context, unsigned int message_id, short id_pitch, unsigned int time);",
	"sceSESq2PlayDefault" : "int sceSESq2PlayDefault(sceCslCtx* module_context, unsigned int port, unsigned char setNo, unsigned char seqNo);",
	"sceSSyn_Init" : "int sceSSyn_Init(sceCslCtx* module_context, unsigned int interval);",
	"sceSSyn_ATick" : "int sceSSyn_ATick(sceCslCtx* module_context);",
	"sceSSyn_Load" : "int sceSSyn_Load(sceCslCtx* module_context, unsigned int port_number);",
	"sceSdHdGetMaxProgramNumber" : "int sceSdHdGetMaxProgramNumber(void *buffer);",
	"sceSdHdGetMaxSampleSetNumber" : "int sceSdHdGetMaxSampleSetNumber(void *buffer);",
	"sceSdHdGetMaxSampleNumber" : "int sceSdHdGetMaxSampleNumber(void *buffer);",
	"sceSdHdGetMaxVAGInfoNumber" : "int sceSdHdGetMaxVAGInfoNumber(void *buffer);",
	"sceSdHdGetProgramParamAddr" : "int sceSdHdGetProgramParamAddr(void *buffer, unsigned int programNumber, sceHardSynthProgramParam **ptr);",
	"sceSdHdGetProgramParam" : "int sceSdHdGetProgramParam(void *buffer, unsigned int programNumber, SceSdHdProgramParam *param);",
	"sceSdHdGetSplitBlockAddr" : "int sceSdHdGetSplitBlockAddr(void *buffer, unsigned int programNumber, unsigned int splitBlockNumber, sceHardSynthSplitBlock **theParamPtr);",
	"sceSdHdGetSplitBlock" : "int sceSdHdGetSplitBlock(void *buffer, unsigned int programNumber, unsigned int splitBlockNumber, SceSdHdSplitBlock *param);",
	"sceSdHdGetSampleSetParamAddr" : "int sceSdHdGetSampleSetParamAddr(void *buffer, unsigned int sampleSetNumber, sceHardSynthSampleSetParam **ptr);",
	"sceSdHdGetSampleSetParam" : "int sceSdHdGetSampleSetParam(void *buffer, unsigned int sampleSetNumber, SceSdHdSampleSetParam *param);",
	"sceSdHdGetSampleParamAddr" : "int sceSdHdGetSampleParamAddr(void *buffer, unsigned int sampleNumber, sceHardSynthSampleParam **ptr);",
	"sceSdHdGetSampleParam" : "int sceSdHdGetSampleParam(void *buffer, unsigned int sampleNumber, SceSdHdSampleParam *param);",
	"sceSdHdGetVAGInfoParamAddr" : "int sceSdHdGetVAGInfoParamAddr(void *buffer, unsigned int vagInfoNumber, sceHardSynthVagParam **ptr);",
	"sceSdHdGetVAGInfoParam" : "int sceSdHdGetVAGInfoParam(void *buffer, unsigned int vagInfoNumber, SceSdHdVAGInfoParam *param);",
	"sceSdHdCheckProgramNumber" : "int sceSdHdCheckProgramNumber(void *buffer, unsigned int programNumber);",
	"sceSdHdGetSplitBlockCountByNote" : "int sceSdHdGetSplitBlockCountByNote(void *buffer, unsigned int programNumber, unsigned int noteNumber);",
	"sceSdHdGetSplitBlockAddrByNote" : "int sceSdHdGetSplitBlockAddrByNote(void *buffer, unsigned int programNumber, unsigned int noteNumber, sceHardSynthSplitBlock **ptr);",
	"sceSdHdGetSplitBlockByNote" : "int sceSdHdGetSplitBlockByNote(void *buffer, unsigned int programNumber, unsigned int noteNumber, SceSdHdSplitBlock *param);",
	"sceSdHdGetSampleSetParamCountByNote" : "int sceSdHdGetSampleSetParamCountByNote(void *buffer, unsigned int programNumber, unsigned int noteNumber);",
	"sceSdHdGetSampleSetParamAddrByNote" : "int sceSdHdGetSampleSetParamAddrByNote(void *buffer, unsigned int programNumber, unsigned int noteNumber, sceHardSynthSampleSetParam **ptr);",
	"sceSdHdGetSampleSetParamByNote" : "int sceSdHdGetSampleSetParamByNote(void *buffer, unsigned int programNumber, unsigned int noteNumber, SceSdHdSampleSetParam *param);",
	"sceSdHdGetSampleParamCountByNoteVelocity" : "int sceSdHdGetSampleParamCountByNoteVelocity(void *buffer, unsigned int programNumber, unsigned int noteNumber, unsigned int velocity, unsigned int mode);",
	"sceSdHdGetSampleParamAddrByNoteVelocity" : "int sceSdHdGetSampleParamAddrByNoteVelocity(void *buffer, unsigned int programNumber, unsigned int noteNumber, unsigned int velocity, unsigned int mode, sceHardSynthSampleParam **ptr);",
	"sceSdHdGetSampleParamByNoteVelocity" : "int sceSdHdGetSampleParamByNoteVelocity(void *buffer, unsigned int programNumber, unsigned int noteNumber, unsigned int velocity, unsigned int mode, SceSdHdSampleParam *param);",
	"sceSdHdGetVAGInfoParamCountByNoteVelocity" : "int sceSdHdGetVAGInfoParamCountByNoteVelocity(void *buffer, unsigned int programNumber, unsigned int noteNumber, unsigned int velocity, unsigned int mode);",
	"sceSdHdGetVAGInfoParamAddrByNoteVelocity" : "int sceSdHdGetVAGInfoParamAddrByNoteVelocity(void *buffer, unsigned int programNumber, unsigned int noteNumber, unsigned int velocity, unsigned int mode, sceHardSynthVagParam **ptr);",
	"sceSdHdGetVAGInfoParamByNoteVelocity" : "int sceSdHdGetVAGInfoParamByNoteVelocity(void *buffer, unsigned int programNumber, unsigned int noteNumber, unsigned int velocity, unsigned int mode, SceSdHdVAGInfoParam *param);",
	"sceSdHdGetSampleParamCountByVelocity" : "int sceSdHdGetSampleParamCountByVelocity(void *buffer, unsigned int sampleSetNumber, unsigned int velocity, unsigned int mode);",
	"sceSdHdGetSampleParamAddrByVelocity" : "int sceSdHdGetSampleParamAddrByVelocity(void *buffer, unsigned int sampleSetNumber, unsigned int velocity, unsigned int mode, sceHardSynthSampleParam **ptr);",
	"sceSdHdGetSampleParamByVelocity" : "int sceSdHdGetSampleParamByVelocity(void *buffer, unsigned int sampleSetNumber, unsigned int velocity, unsigned int mode, SceSdHdSampleParam *param);",
	"sceSdHdGetVAGInfoParamCountByVelocity" : "int sceSdHdGetVAGInfoParamCountByVelocity(void *buffer, unsigned int sampleSetNumber, unsigned int velocity, unsigned int mode);",
	"sceSdHdGetVAGInfoParamAddrByVelocity" : "int sceSdHdGetVAGInfoParamAddrByVelocity(void *buffer, unsigned int sampleSetNumber, unsigned int velocity, unsigned int mode, sceHardSynthVagParam **ptr);",
	"sceSdHdGetVAGInfoParamByVelocity" : "int sceSdHdGetVAGInfoParamByVelocity(void *buffer, unsigned int sampleSetNumber, unsigned int velocity, unsigned int mode, SceSdHdVAGInfoParam *param);",
	"sceSdHdGetVAGInfoParamAddrBySampleNumber" : "int sceSdHdGetVAGInfoParamAddrBySampleNumber(void *buffer, unsigned int sampleNumber, sceHardSynthVagParam **ptr);",
	"sceSdHdGetVAGInfoParamBySampleNumber" : "int sceSdHdGetVAGInfoParamBySampleNumber(void *buffer, unsigned int sampleNumber, SceSdHdVAGInfoParam *param);",
	"sceSdHdGetSplitBlockNumberBySplitNumber" : "int sceSdHdGetSplitBlockNumberBySplitNumber(void *buffer, unsigned int programNumber, unsigned int splitNumber);",
	"sceSdHdGetVAGSize" : "int sceSdHdGetVAGSize(void *buffer, unsigned int vagInfoNumber);",
	"sceSdHdGetSplitBlockCount" : "int sceSdHdGetSplitBlockCount(void *buffer, unsigned int programNumber);",
	"sceSdHdGetMaxSplitBlockCount" : "int sceSdHdGetMaxSplitBlockCount(void *buffer);",
	"sceSdHdGetMaxSampleSetParamCount" : "int sceSdHdGetMaxSampleSetParamCount(void *buffer);",
	"sceSdHdGetMaxSampleParamCount" : "int sceSdHdGetMaxSampleParamCount(void *buffer);",
	"sceSdHdGetMaxVAGInfoParamCount" : "int sceSdHdGetMaxVAGInfoParamCount(void *buffer);",
	"sceSdHdModifyVelocity" : "int sceSdHdModifyVelocity(unsigned int curveType, int velocity);",
	"sceSdHdModifyVelocityLFO" : "int sceSdHdModifyVelocityLFO(unsigned int curveType, int velocity, int center);",
	"sceSdHdGetValidProgramNumberCount" : "int sceSdHdGetValidProgramNumberCount(void *buffer);",
	"sceSdHdGetValidProgramNumber" : "int sceSdHdGetValidProgramNumber(void *buffer, unsigned int *ptr);",
	"sceSdHdGetSampleNumberBySampleIndex" : "int sceSdHdGetSampleNumberBySampleIndex(void *buffer, unsigned int sampleSetNumber, unsigned int sampleIndexNumber);",
	"sceSdSqGetMaxMidiNumber" : "int sceSdSqGetMaxMidiNumber(void *addr);",
	"sceSdSqGetMaxSongNumber" : "int sceSdSqGetMaxSongNumber(void *addr);",
	"sceSdSqInitMidiData" : "int sceSdSqInitMidiData(void *addr, unsigned int midiNumber, SceSdSqMidiData *midiData);",
	"sceSdSqReadMidiData" : "int sceSdSqReadMidiData(SceSdSqMidiData *midiData);",
	"sceSdSqInitSongData" : "int sceSdSqInitSongData(void *addr, unsigned int songNumber, SceSdSqSongData *songData);",
	"sceSdSqReadSongData" : "int sceSdSqReadSongData(SceSdSqSongData *songData);",
	"sceSdSqGetMaxCompTableIndex" : "int sceSdSqGetMaxCompTableIndex(void *addr, unsigned int midiNumber);",
	"sceSdSqGetCompTableOffset" : "int sceSdSqGetCompTableOffset(void *addr, unsigned int midiNumber, unsigned int *offset);",
	"sceSdSqGetCompTableDataByIndex" : "int sceSdSqGetCompTableDataByIndex(void *addr, unsigned int midiNumber, unsigned int compTableIndex, SceSdSqCompTableData *data);",
	"sceSdSqGetNoteOnEventByPolyKeyPress" : "int sceSdSqGetNoteOnEventByPolyKeyPress(void *addr, unsigned int midiNumber, SceSdSqPolyKeyData *pData, SceSdSqCompTableNoteOnEvent *kData);",
	"sceSdSqCopyMidiData" : "int sceSdSqCopyMidiData(SceSdSqMidiData *to, const SceSdSqMidiData *from);",
	"sceSdSqCopySongData" : "int sceSdSqCopySongData(SceSdSqSongData *to, const SceSdSqSongData *from);",
	"sceSpuCodecEncode" : "int sceSpuCodecEncode(sceSpuEncodeEnv * env);",

	"open" : "int open(const char *name, int mode);",
	"close" : "int close(int fd);",
	"read" : "int read(int fd, void *ptr, size_t size);",
	"write" : "int write(int fd, void *ptr, size_t size);",
	"lseek" : "int lseek(int fd, int pos, int mode);",
	"ioctl" : "int ioctl(int fd, int command, void *arg);",
	"remove" : "int remove(const char *name);",
	"mkdir" : "int mkdir(const char *path);",
	"rmdir" : "int rmdir(const char *path);",
	"dopen" : "int dopen(const char *path, int mode);",
	"dclose" : "int dclose(int fd);",
	"dread" : "int dread(int fd, io_dirent_t *buf);",
	"getstat" : "int getstat(const char *name, io_stat_t *stat);",
	"chstat" : "int chstat(const char *name, io_stat_t *stat, unsigned int statmask);",
	"format" : "int format(const char *dev);"
}
